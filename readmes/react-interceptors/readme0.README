
Login and cookie setup flow:

    a. Login page -> Enter username and password -> Hit login API with the payload -> The auth server generates a fresh JWT cookie as below:
        {
            "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im5hdmVlbkB0ZWNoc2Vla2VyLmNvbSIsImZpcnN0TmFtZSI6Im5hdmVlbiIsImlkIjoxLCJsYXN0TmFtZSI6ImJvbW1pZGkiLCJwaG9uZSI6IjEyMzQ1Njc4OTAiLCJpYXQiOjE3MDE5MDY4MjgsImV4cCI6MTcwMTkwNjg1OH0.EjTSub4Uru2-vg4d2XWQoWVGNd5dtc27_5HBDjCVABk",
            "refreshToken": "wCH7PEZy1AbvsASAPyM9qo7Bus3qqy"
        }

    b. The above cookie is placed in the browser application tab under cookie section by an axios facility below:
        withCredentials - Used for cross-origin cookie transfers [refer AuthContext.tsx]

    c. When movie list request api is hit (/auth-check), the cookie gets attached by the 'withCredentials' facility to the api endpoint and 
        this cookie is verified by the auth server to cater the request.

    d. When the Auth server finds that the cookie has got expired, it sends 401-Unauthorized error as response.

    e. Instead of relogin, Interceptors act as middleman to intercept the failed response and trigger a refresh token request api and get a 
        new cookie with new access token and new refresh token. [But in our mocking we use same refresh token for demostration purpose].
        --> with refresh token rotation enabled in the Auth0 Dashboard, every time your application exchanges a refresh token to get a new access token, the authorization server also returns a new refresh-access token pair.

    f. Once the new cookie is set, the interceptors automatically retrigger the actual endpoint to get the resource details.

Links:
    a. https://auth0.com/blog/refresh-tokens-what-are-they-and-when-to-use-them/
    b. https://stackoverflow.com/questions/43877488/is-it-necessary-to-refresh-tokens-every-request
    